window.storyFormat({
    "name": "CopyPaste",
    "version": "1.4.5",
    "url": "https://github.com/cocoknightcom/CopyPaste",
    "author": "cocoknightcom",
    "description": "A Twine 2 Proofing Story Format that cuts it. Filter passages by tag.",
    "license": "MIT",
    "image": "icon.svg",
    "proofing": true,
    "source": "<!doctype html>\n\n<html>\n<head>\n  <meta charset=\"utf-8\">\n\n  <title>{{STORY_NAME}}</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n  <link rel=\"shortcut icon\" type=\"image/svg\" href=\"https://cocoknight.com/CopyPaste/dist/icon.svg\"/>\n  <style>\nhtml, body, .container {\n\tcolor: #303030;\n\tfont-family: 'SF Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n\tfont-size: 15px;\n\tmargin: 0;\n\tpadding: 0;\n\t-webkit-user-select: none;\n\tuser-select: none;\n}\nbody.dark-theme {\n    color: #cfcfcf;\n}\n.container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: #e6e7f0;\n  background-size: poster;\n}\nbody.dark-theme .container {\n  color: #cfcfcf;\n  background: #19180f;\n}\n.wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 50%;\n  max-width: 90%;\n  margin: 4% 0;\n  background-color: rgb(255,255,255,.5);\n}\nbody.dark-theme .wrapper {\n\tbackground-color: rgb(0,0,0,.5);\n}\n.content {\n  text-align: left;\n  -webkit-user-select: text;\n  user-select: text;\n}\nh1 {\n\tmargin-top: 15px;\n\tfont-size: 19px;\n\tmargin-bottom: 30px;\n}\nh2 {\n\tfont-weight: normal;\n}\nh3 {\n\tmargin-top: -15px;\n\tpadding-bottom: 2%;\n\tfont-weight: normal;\n}\nh4 {\n\tfont-size: 19px;\n\tfont-weight: normal;\n}\na {\n\tcolor: rgb(46, 87, 224);\n}\na.btn {\n\tpadding: 10px 20px;\n\tcolor: white;\n\tbackground-color: rgb(46, 114, 224);\n\ttext-decoration: none;\n}\nlabel, button {\n\t-webkit-user-select: none;\n\tuser-select: none;\n}\nh1, h2, h3, h4, p {\n    padding: 0 20% 2% 20%;\n}\np code {\n\tdisplay: inline-block;\n\tpadding: 0.1em 0.7em 0.2em 0.6em;\n\tcolor: #e6e7f0;\n\tbackground-color: #404040;\n\tborder-radius: 4px;\n}\nbody.dark-theme p code {\n\tcolor: #19180f;\n\tbackground-color: #bfbfbf;\n}\n.toggle-container {\n  display: flex;\n  align-items: center;\n}\n.toggle-button {\n  width: 40px;\n  height: 20px;\n  border-radius: 10px;\n  background-color: #ccc;\n  cursor: pointer;\n  position: relative; /* to position the handle absolutely within */\n}\nbody.dark-theme .toggle-button {\n\tbackground-color: #333;\n}\n.toggle-handle {\n  width: 18px;\n  height: 18px;\n  border-radius: 50%;\n  background-color: #fff;\n  position: absolute;\n  top: 1px; /* Center within toggle button vertically */\n  left: 2px;\n  transition: transform 0.3s ease-in-out;\n}\nbody.dark-theme .toggle-handle {\n  background-color: #000;\n}\n.st0 {\n\tfont-family:Helvetica-Light, Helvetica;\n\tfont-size:21px;font-weight:300;\n\tisolation:isolate;\n\tfill:#000;\n}\nbody.dark-theme .st0 {\n\tfill:#fff;\n}\n.st1 {\n\tfill:#fff;\n}\nbody.dark-theme .st1 {\n\tfill:#000;\n}\n.filter-list {\n\tposition: fixed;\n\ttop: 10px;\n\tright: 60px;\n\tbackground-color: #fff;\n\tpadding: 5px;\n\tborder: 1px solid #ccc;\n\tborder-radius: 5px;\n}\nbody.dark-theme .filter-list {\n\tbackground-color: #000;\n\tborder: 1px solid #333;\n}\n.filter-button {\n    margin-right: 5px;\n    cursor: pointer;\n}\n@media (min-width: 481px) and (max-width: 767px) {\n\th1, h2, h3, h4, p {\n\t  padding: 0 5% 2% 5%;\n\t}\n}\n@media (min-width: 320px) and (max-width: 480px) {\n\th1, h2, h3, h4, p {\n\t  padding: 0 5% 2% 5%;\n\t}\n}\n</style>\n\n</head>\n\n<body>\n    <div class=\"container\">\n        <div class=\"wrapper\">\n            <div class=\"content\">\n                <h1># {{STORY_NAME}}</h1>\n            </div>\n        </div>\n    </div>\n    {{STORY_DATA}}\n    <script>\ndocument.addEventListener('DOMContentLoaded', function () {\n    // Create a filter list\n    var filterList = document.createElement('div');\n    filterList.classList.add('filter-list');\n\n    // Fetch available tags from tw-tag elements\n    var availableTags = [];\n    var tagElements = document.querySelectorAll('tw-tag');\n    tagElements.forEach(function (tagElement) {\n        availableTags.push(tagElement.getAttribute('name'));\n    });\n    \n    // Create CopyPaste Icon\n    var iconImage = document.createElement('div');\n    iconImage.innerHTML = '<?xml version=\"1.0\" encoding=\"UTF-8\"?><svg id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 174.6 159.2\"><rect class=\"st1\" width=\"174.6\" height=\"159.2\"/><g class=\"st0\"><g><g><path d=\"M54.1,44.3c.9-2.7,2.1-6.1,4.9-7.3,3-1.3,6.6.3,8.9,2.2,5.5,4.6,8.5,11.8,15.7,14.1-.3-1-.5-2.1-.8-3.1-1.8,1.5-3.6,3-5.5,4.5-1.8,1.5-3,2.9-2.8,5.3.3,3.3.9,6.5,1.4,9.8.5,3.6,1.1,7.2,1.4,10.8.2,1.6.3,3.2.3,4.8,0,.6-.1,1.4,0,2,0,0,0,.2,0,.3.3-.4.6-.9.9-1.3-.2.1.8-1.1.4-.1,0,0-.1,0-.2,0-.5.2.3,0,0,0-.3,0-.5,0-.8,0-.7,0-1.4,0-2.1,0-2,0-4,0-6,0-4.8,0-9.5-.1-14.3-.2-2.9,0-5.8-.1-8.7-.2l1.9,1.9c.5-11.1,1.3-22.4,3-33.4.6-3.5,1.2-7,2.2-10.4.7-2.3-2.9-3.3-3.6-1-2.1,6.6-2.8,13.7-3.6,20.6-.7,6.7-1.2,13.4-1.6,20.1,0,1.4-.2,2.8-.2,4.1,0,1,.9,1.9,1.9,1.9,7.2.2,14.5.4,21.7.4,3.4,0,6.9.2,10.3-.2.5,0,1.1-.1,1.5-.4,1.3-.8,1-2.6,1-3.9,0-3.5-.5-7.1-1-10.6-.5-4-1.2-8-1.8-12.1-.1-.7-.2-1.4-.3-2.1-.2-1.3-.3-2,.8-2.9,2.1-1.8,4.2-3.5,6.3-5.3,1.1-1,.4-2.7-.8-3.1-3.7-1.2-6.3-4.2-8.6-7.1-2.5-3.1-5.1-6.5-8.8-8.3-3.4-1.7-7.6-2.2-11,0-3.2,2-4.6,5.6-5.8,9-.7,2.3,2.9,3.3,3.6,1Z\"/><path d=\"M67.3,51.2c2.4,0,2.4-3.8,0-3.8s-2.4,3.8,0,3.8h0Z\"/></g><g><path d=\"M124.1,43.3c-1.1-3.4-2.6-7-5.8-9-3.3-2.1-7.6-1.6-11,0-3.7,1.8-6.3,5.2-8.8,8.3-2.4,2.9-5,6-8.6,7.1-1.2.4-2,2.2-.8,3.1,1.8,1.5,3.6,3,5.5,4.5.8.6,1.8,1.2,1.8,2.2,0,.7-.1,1.5-.2,2.2-.5,3.4-1,6.9-1.5,10.3-.5,3.7-1,7.3-1.3,11-.1,1.5-.2,3-.1,4.5,0,1.1.5,1.9,1.6,2.2,1.1.3,2.4.3,3.5.3,2,0,3.9,0,5.9,0,4.8,0,9.7,0,14.5-.2,3,0,6-.1,9.1-.2,1,0,1.9-.8,1.9-1.9-.5-11.5-1.4-23-3.2-34.4-.5-3.5-1.1-7-2.2-10.4-.7-2.3-4.4-1.3-3.6,1,2,6.4,2.8,13.3,3.5,20,.7,6.5,1.2,13.1,1.6,19.6,0,1.4.2,2.8.2,4.1l1.9-1.9c-7.1.2-14.2.4-21.2.4-3.5,0-7,0-10.5-.2-.5,0,.4.2-.1,0,0,0-.1,0-.1,0,0,0,.3.1.4.1-.2-.1.6,1.9.9,1.1.1-.6,0-1.4,0-2,0-.8,0-1.6.1-2.4.2-3.5.7-7.1,1.2-10.6.5-3.7,1.2-7.5,1.7-11.2.1-1.1.3-2.2,0-3.3-.3-1.1-1.1-2-2-2.7-2-1.7-4.1-3.4-6.2-5.1-.3,1-.5,2.1-.8,3.1,7.3-2.3,10.3-9.5,15.7-14.1,2.3-2,5.9-3.5,8.9-2.2,2.9,1.2,4,4.5,4.9,7.3.7,2.3,4.3,1.3,3.6-1Z\"/><path d=\"M107.2,51.2c2.4,0,2.4-3.8,0-3.8s-2.4,3.8,0,3.8h0Z\"/></g></g><text transform=\"translate(26.6 117)\"><tspan x=\"0\" y=\"0\">COPYPASTE</tspan></text></g></svg>'\n    filterList.appendChild(iconImage);\n    filterList.appendChild(document.createElement('hr'));\n\n    // Create \"Activate All\" button\n    var activateAllButton = document.createElement('button');\n    activateAllButton.textContent = 'All';\n    filterList.classList.add('filter-button');\n    activateAllButton.addEventListener('click', function () {\n        toggleAllCheckboxes(true);\n    });\n    filterList.appendChild(activateAllButton);\n\n    // Create \"Activate None\" button\n    var activateNoneButton = document.createElement('button');\n    activateNoneButton.textContent = 'None';\n    filterList.classList.add('filter-button');\n    activateNoneButton.addEventListener('click', function () {\n        toggleAllCheckboxes(false);\n    });\n    filterList.appendChild(activateNoneButton);\n    filterList.appendChild(document.createElement('br'));\n\n    // Create \"Activate Untagged\" checkbox\n    var activateUntaggedCheckbox = document.createElement('input');\n    activateUntaggedCheckbox.type = 'checkbox';\n    activateUntaggedCheckbox.id = 'activateUntaggedCheckbox';\n    activateUntaggedCheckbox.checked = true;\n    var untaggedLabel = document.createElement('label');\n    untaggedLabel.htmlFor = 'activateUntaggedCheckbox';\n    untaggedLabel.textContent = 'Untagged';\n    filterList.appendChild(activateUntaggedCheckbox);\n    filterList.appendChild(untaggedLabel);\n    filterList.appendChild(document.createElement('br'));\n\n    // Create checkboxes for each tag\n    availableTags.forEach(function (tag) {\n        var checkbox = document.createElement('input');\n        checkbox.type = 'checkbox';\n        checkbox.id = 'tagCheckbox_' + tag;\n        checkbox.value = tag;\n        checkbox.checked = true; // All tags are active by default\n\n        var label = document.createElement('label');\n        label.htmlFor = 'tagCheckbox_' + tag;\n        label.textContent = tag;\n\n        filterList.appendChild(checkbox);\n        filterList.appendChild(label);\n        filterList.appendChild(document.createElement('br'));\n    });\n\n    filterList.appendChild(document.createElement('hr'));\n\n    // Create a fun toggle button\n    var logicToggleButton = document.createElement('div');\n    logicToggleButton.classList.add('toggle-button');\n\n    // Create label for the toggle\n    var logicToggleLabel = document.createElement('span');\n    logicToggleLabel.textContent = 'Logic Blocks';\n    logicToggleLabel.style.marginLeft = '8px';\n\n    // Wrap toggle in a container\n    var toggleContainer = document.createElement('div');\n    toggleContainer.classList.add('toggle-container');\n    toggleContainer.style.marginBottom = '8px';\n\n    // Append label and toggle to container\n    toggleContainer.appendChild(logicToggleButton);\n    toggleContainer.appendChild(logicToggleLabel);\n\n    // Create the switch handle\n    var logicSwitchHandle = document.createElement('div');\n    logicSwitchHandle.classList.add('toggle-handle');\n\n    // Append the handle to the toggle button\n    logicToggleButton.appendChild(logicSwitchHandle);\n\n    logicToggleButton.dataset.showCodeBlocks = 'false'; // start in \"off\" position\n\n    logicToggleButton.addEventListener('click', function () {\n        var showCodeBlocks = logicToggleButton.dataset.showCodeBlocks === 'true';\n        showCodeBlocks = !showCodeBlocks;  // toggle the state\n\n        logicToggleButton.dataset.showCodeBlocks = showCodeBlocks.toString();\n\n        toggleExtractStrings();\n\n        logicSwitchHandle.style.transform = showCodeBlocks ? 'translateX(18px)' : 'translateX(0)';\n    });\n\n    filterList.appendChild(toggleContainer);\n\n    // Create theme toggle container similar to logic blocks toggle\n    var themeToggleContainer = document.createElement('div');\n    themeToggleContainer.classList.add('toggle-container');\n    themeToggleContainer.style.cursor = 'pointer';\n\n    // Create label for theme toggle\n    var themeLabel = document.createElement('span');\n    themeLabel.textContent = 'Dark Mode';\n    themeLabel.style.marginLeft = '8px';\n\n    // Create toggle button element\n    var themeToggleButton = document.createElement('div');\n    themeToggleButton.classList.add('toggle-button');\n    themeToggleButton.id = 'themeToggleButton'; // assign id for event handling\n\n    // Create switch handle inside toggle button\n    var themeSwitchHandle = document.createElement('div');\n    themeSwitchHandle.classList.add('toggle-handle');\n\n    // Append handle to toggle button\n    themeToggleButton.appendChild(themeSwitchHandle);\n\n    // Append label and toggle button to the container\n    themeToggleContainer.appendChild(themeToggleButton);\n    themeToggleContainer.appendChild(themeLabel);\n\n    filterList.appendChild(themeToggleContainer);\n\n    document.body.appendChild(filterList);\n\n    // Function to apply theme\n    function applyTheme(isDark) {\n        if (isDark) {\n            document.body.classList.add('dark-theme');\n        } else {\n            document.body.classList.remove('dark-theme');\n        }\n        // Save preference\n        localStorage.setItem('theme', isDark ? 'dark' : 'light');\n    }\n\n    // Load saved preference or match system\n    let isDarkMode = false;\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n        isDarkMode = savedTheme === 'dark';\n        applyTheme(isDarkMode);\n        if (isDarkMode) {\n            themeSwitchHandle.style.transform = 'translateX(18px)';\n        } else {\n            themeSwitchHandle.style.transform = 'translateX(0)';\n        }\n    } else {\n        const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n        isDarkMode = prefersDark;\n        applyTheme(isDarkMode);\n        themeSwitchHandle.style.transform = isDarkMode ? 'translateX(18px)' : 'translateX(0)';\n    }\n\n    // Function to toggle all checkboxes\n    function toggleAllCheckboxes(checked) {\n        filterList.querySelectorAll('input[type=\"checkbox\"]').forEach(function (checkbox) {\n            checkbox.checked = checked;\n        });\n\n        // Trigger the filter based on the updated checkboxes\n        var selectedCheckboxes = Array.from(filterList.querySelectorAll('input[type=\"checkbox\"]:checked')).map(checkbox => checkbox.value);\n        filterElements(selectedCheckboxes, activateUntaggedCheckbox.checked);\n    }\n\n    // Function to toggle extracting strings in parentheses\n    function toggleExtractStrings() {\n        // Toggle the state\n        extractStrings = !extractStrings;\n\n        // Trigger the filter based on the updated state\n        var selectedCheckboxes = Array.from(filterList.querySelectorAll('input[type=\"checkbox\"]:checked')).map(checkbox => checkbox.value);\n        filterElements(selectedCheckboxes, activateUntaggedCheckbox.checked);\n    }\n\n    // Variable to store the state of extracting strings in parentheses\n    var extractStrings = true;\n    \n    function wrapNestedDelimiters(input, hide) {\n        let output = '';\n        let depthParentheses = 0;\n        let depthAngleBrackets = 0;\n        let display = '';\n        let skipWhitespace = false;\n        let codeContent = '';\n    \n        if (hide) {\n            display = ' style=\"display: none !important\"';\n        }\n    \n        function escapeHtml(str) {\n            return str.replace(/&/g, '&amp;')\n                      .replace(/</g, '&lt;')\n                      .replace(/>/g, '&gt;');\n        }\n    \n        for (let i = 0; i < input.length; i++) {\n            let char = input[i];\n            if (char === '(') {\n                if (depthParentheses === 0 && depthAngleBrackets === 0) {\n                    codeContent = '';\n                }\n                depthParentheses++;\n                codeContent += char;\n                skipWhitespace = false; // Reset the flag when an opening parenthesis is encountered\n            } else if (char === ')') {\n                depthParentheses--;\n                codeContent += char;\n                if (depthParentheses === 0 && depthAngleBrackets === 0) {\n                    output += '<code' + display + '>' + escapeHtml(codeContent) + '</code>';\n                    skipWhitespace = true; // Set the flag to skip whitespace before the next line break\n                }\n            } else if (char === '<' && input[i + 1] === '<') {\n                if (depthAngleBrackets === 0 && depthParentheses === 0) {\n                    codeContent = '';\n                }\n                depthAngleBrackets++;\n                codeContent += '<<';\n                i++; // Skip the next '<' character\n                skipWhitespace = false; // Reset the flag when an opening angle bracket is encountered\n            } else if (char === '>' && input[i + 1] === '>') {\n                depthAngleBrackets--;\n                codeContent += '>>';\n                i++; // Skip the next '>' character\n                if (depthAngleBrackets === 0 && depthParentheses === 0) {\n                    output += '<code' + display + '>' + escapeHtml(codeContent) + '</code>';\n                    skipWhitespace = true; // Set the flag to skip whitespace before the next line break\n                }\n            } else if (char === '\\n' || char === '\\r') {\n                if (hide && skipWhitespace) {\n                    continue; // Skip line break and preceding whitespace when hide is true\n                }\n                output += char;\n                skipWhitespace = false; // Reset the flag when a line break is encountered\n            } else if (char === ' ' || char === '\\t') {\n                if (skipWhitespace) {\n                    continue; // Skip whitespace if the flag is set\n                }\n                if (depthParentheses > 0 || depthAngleBrackets > 0) {\n                    codeContent += char;\n                } else {\n                    output += char;\n                }\n            } else {\n                if (depthParentheses > 0 || depthAngleBrackets > 0) {\n                    codeContent += char;\n                } else {\n                    output += char;\n                }\n                skipWhitespace = false; // Reset the flag when a non-whitespace character is encountered\n            }\n        }\n    \n        return output;\n    }    \n\n    // Function to filter elements based on selected tags and untagged option\n    function filterElements(selectedTags, includeUntagged) {\n        // Remove existing h2 and p elements\n        document.querySelectorAll('.content h2, .content p').forEach(function (element) {\n            element.parentNode.removeChild(element);\n        });\n\n        // Iterate over tw-passagedata elements\n        var passages = document.querySelectorAll('tw-passagedata');\n        passages.forEach(function (passage) {\n            var passageTags = passage.getAttribute('tags');\n\n            if ((passageTags && selectedTags.some(tag => passageTags.includes(tag))) || (!passageTags && includeUntagged)) {\n                // Get the 'name' attribute value\n                var passageName = passage.getAttribute('name');\n\n                // Extract strings in parentheses and remove them from the content if enabled\n                var passageContent = passage.textContent;\n                passageContent = wrapNestedDelimiters(passageContent, extractStrings);\n\n                // Trim leading and trailing whitespace and line breaks\n                passageContent = passageContent.trim();\n\n                // Replace plain text line breaks with HTML line breaks\n                passageContent = passageContent.replace(/\\n/g, '<br>');\n\n                // Create an h2 element\n                var h2 = document.createElement('h2');\n                h2.textContent = '## ' + passageName;\n\n                // Create a new p element\n                var p = document.createElement('p');\n                p.innerHTML = passageContent;\n\n                // Get the 'content' div\n                var contentDiv = document.querySelector('.content');\n\n                // Append the h2 and p elements to the 'content' div\n                contentDiv.appendChild(h2);\n                contentDiv.appendChild(p);\n            }\n        });\n    }\n\n    // Initial execution with all tags and untagged selected\n    var selectedCheckboxes = Array.from(filterList.querySelectorAll('input[type=\"checkbox\"]:checked')).map(checkbox => checkbox.value);\n    filterElements(selectedCheckboxes, activateUntaggedCheckbox.checked);\n\n    // Add change event listener to the checkboxes, untagged option, and extract strings toggle\n    filterList.addEventListener('change', function (event) {\n        var selectedCheckboxes = Array.from(filterList.querySelectorAll('input[type=\"checkbox\"]:checked')).map(checkbox => checkbox.value);\n        filterElements(selectedCheckboxes, activateUntaggedCheckbox.checked);\n    });\n    // Add event listener for theme toggle\n    themeToggleButton.addEventListener('click', function () {\n        isDarkMode = !isDarkMode;\n        applyTheme(isDarkMode);\n        localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n        // Animate switch handle\n        themeSwitchHandle.style.transform = isDarkMode ? 'translateX(18px)' : 'translateX(0)';\n    });\n});\n</script>\n</body>\n</html>"
});